use xz_rs::checksum::{Checksum, Crc32};

fn main() {
    let _abc_bytes = [
        0xfd, 0x37, 0x7a, 0x58, 0x5a, 0x00, 0x00, 0x01, 0x69, 0x22, 0xde, 0x36, 0x04, 0xc0, 0x08,
        0x04, 0x21, 0x01, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x41,
        0xbc, 0x27, 0x01, 0x00, 0x03, 0x61, 0x62, 0x63, 0x0a, 0x00, 0x4e, 0x81, 0x88, 0x47, 0x00,
        0x01, 0x20, 0x04, 0x90, 0x55, 0x6f, 0xb2, 0x90, 0x42, 0x99, 0x0d, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x59, 0x5a,
    ];
    let _abc123_bytes = [
        0xfd, 0x37, 0x7a, 0x58, 0x5a, 0x00, 0x00, 0x01, 0x69, 0x22, 0xde, 0x36, 0x04, 0xc0, 0x16,
        0x10, 0x21, 0x01, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xe4,
        0x2b, 0xfe, 0xe0, 0x00, 0x0f, 0x00, 0x0e, 0x5d, 0x00, 0x30, 0x98, 0x88, 0xa4, 0x4f, 0x97,
        0xfe, 0x32, 0x25, 0x9b, 0x5e, 0x25, 0x88, 0x00, 0x00, 0x00, 0x00, 0xf3, 0x9b, 0xb1, 0xfe,
        0x00, 0x01, 0x2e, 0x10, 0x63, 0xac, 0x36, 0x36, 0x90, 0x42, 0x99, 0x0d, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x59, 0x5a,
    ];

    let _msg_bytes = [
        0xfd, 0x37, 0x7a, 0x58, 0x5a, 0x00, 0x00, 0x01, 0x69, 0x22, 0xde, 0x36, 0x04, 0xc0, 0x8a,
        0x02, 0xf6, 0x04, 0x21, 0x01, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x70,
        0xb7, 0x9b, 0xe0, 0x02, 0x75, 0x01, 0x02, 0x5d, 0x00, 0x2a, 0x1a, 0x08, 0xa2, 0x03, 0x25,
        0x66, 0xf1, 0x4b, 0x78, 0xc5, 0xa4, 0x0b, 0x86, 0x69, 0x44, 0x07, 0xab, 0xdc, 0xf3, 0x37,
        0xcb, 0x42, 0x05, 0x29, 0xe6, 0x91, 0x39, 0x1f, 0x0e, 0x3b, 0xe1, 0xea, 0xe9, 0x26, 0x2c,
        0x6e, 0xf2, 0xc7, 0x13, 0x26, 0xb1, 0x12, 0xfe, 0x69, 0x89, 0x7d, 0xe9, 0xe9, 0x1b, 0x2f,
        0x43, 0xea, 0x12, 0x42, 0x32, 0xe0, 0x0f, 0x37, 0x48, 0x65, 0x07, 0x11, 0xe7, 0x7b, 0xd5,
        0x42, 0x70, 0x25, 0x42, 0x52, 0xb8, 0x86, 0x8b, 0x4c, 0xe0, 0x6a, 0x25, 0xf0, 0xb4, 0x13,
        0xfe, 0x83, 0xc6, 0x7b, 0x14, 0xf0, 0x85, 0x3c, 0x46, 0xba, 0xa8, 0x2c, 0xff, 0x03, 0x3a,
        0x6a, 0xd7, 0xa1, 0xe4, 0x8d, 0xcb, 0x87, 0x0d, 0x85, 0x51, 0x37, 0x87, 0x3b, 0xbd, 0x60,
        0x37, 0x04, 0xc7, 0x10, 0xd4, 0xc4, 0x51, 0x94, 0xb1, 0x19, 0x92, 0xf1, 0x32, 0x55, 0x5d,
        0x0e, 0xbb, 0x46, 0x3a, 0xb6, 0x9c, 0x05, 0x2d, 0x4e, 0xae, 0x1c, 0x9d, 0xb4, 0xb1, 0xf3,
        0x06, 0x35, 0xc9, 0xdc, 0xa4, 0xdf, 0xc8, 0x11, 0x90, 0x00, 0x01, 0x5f, 0x00, 0xa7, 0x1d,
        0x69, 0x69, 0xb3, 0x69, 0x81, 0x56, 0x2c, 0xbe, 0x78, 0x10, 0x7a, 0x65, 0x2a, 0x3b, 0x33,
        0x84, 0x91, 0x7f, 0x0b, 0x0d, 0x87, 0xd0, 0x97, 0x8f, 0xff, 0x62, 0x95, 0xce, 0xe2, 0x1f,
        0x46, 0x2d, 0x0f, 0x51, 0xac, 0xd0, 0x6b, 0x5d, 0x6c, 0x93, 0x18, 0x27, 0x30, 0x7e, 0x7f,
        0x42, 0xac, 0x7a, 0xc7, 0x15, 0x67, 0x05, 0x58, 0x38, 0x65, 0x1e, 0x9c, 0xd4, 0x03, 0x08,
        0xa8, 0x80, 0x3e, 0xf5, 0x25, 0x66, 0xbb, 0x22, 0x9a, 0x1b, 0x0c, 0x77, 0x97, 0x41, 0x77,
        0xd6, 0x1c, 0x6b, 0x32, 0x1d, 0xa3, 0xd9, 0xf2, 0x9a, 0x7e, 0xde, 0xed, 0xf8, 0xe2, 0x97,
        0xad, 0x83, 0xe5, 0x80, 0x81, 0xe8, 0xe7, 0x99, 0xf2, 0x38, 0x0b, 0x6b, 0x00, 0x00, 0x00,
        0xcf, 0x6f, 0xd3, 0xe7, 0x00, 0x01, 0xa2, 0x02, 0xf6, 0x04, 0x00, 0x00, 0xff, 0xd6, 0x45,
        0x49, 0x3e, 0x30, 0x0d, 0x8b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x59, 0x5a,
    ];

    let bytes = &_abc123_bytes;
    for start in 0..bytes.len() {
        for end in (start + 1)..bytes.len() {
            for crc_end in 4..bytes.len() {
                let mut crc32 = Crc32::new();
                crc32.process_bytes(&bytes[start..end]);
                if crc32.result()
                    == u32::from_le_bytes(
                        bytes[(crc_end - 4)..crc_end].try_into().unwrap_or_default(),
                    )
                    || crc32.result()
                        == u32::from_be_bytes(
                            bytes[(crc_end - 4)..crc_end].try_into().unwrap_or_default(),
                        )
                {
                    println!(
                        "found working set: {start}..{end}: {}..{crc_end}",
                        crc_end - 4
                    );
                }
            }
        }
    }
}
